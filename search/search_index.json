{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project mission Helpful AI for Home and Business Automation Local data, custom AI models, federated learning Project Status At this time, Ambianic is in active early formation stages. Lots of design and implementation decisions are made daily with focus on advancing the project to an initial stable version as soon as possible. If you are willing to take the risk that comes with early stage code and are able to dive deep into Python, Javascript, Gstreamer, and Tensorflow code, then please keep reading. Otherwise click on the Watch button above (Releases Only option) to be notified when we release a stable end user version. How to run in development mode If you are interested to try the development version, follow these steps: 1. Clone this git repository. 2. ./ambianic-start.sh 3. Study config.yaml and go from there. Contributors If you are interested in becoming a contributor to the project, please read the Contributing page and follow the steps. Looking forward to hearing from you!","title":"Home"},{"location":"#project-mission","text":"Helpful AI for Home and Business Automation Local data, custom AI models, federated learning","title":"Project mission"},{"location":"#project-status","text":"At this time, Ambianic is in active early formation stages. Lots of design and implementation decisions are made daily with focus on advancing the project to an initial stable version as soon as possible. If you are willing to take the risk that comes with early stage code and are able to dive deep into Python, Javascript, Gstreamer, and Tensorflow code, then please keep reading. Otherwise click on the Watch button above (Releases Only option) to be notified when we release a stable end user version.","title":"Project Status"},{"location":"#how-to-run-in-development-mode","text":"If you are interested to try the development version, follow these steps: 1. Clone this git repository. 2. ./ambianic-start.sh 3. Study config.yaml and go from there.","title":"How to run in development mode"},{"location":"#contributors","text":"If you are interested in becoming a contributor to the project, please read the Contributing page and follow the steps. Looking forward to hearing from you!","title":"Contributors"},{"location":"CONTRIBUTING/","text":"How to Contribute We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. Contributor License Agreement Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://ambianic.ai/cla to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again. Code reviews All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests. Community Guidelines This project follows Google's Open Source Community Guidelines .","title":"Contributing"},{"location":"CONTRIBUTING/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.","title":"How to Contribute"},{"location":"CONTRIBUTING/#contributor-license-agreement","text":"Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://ambianic.ai/cla to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.","title":"Contributor License Agreement"},{"location":"CONTRIBUTING/#code-reviews","text":"All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Code reviews"},{"location":"CONTRIBUTING/#community-guidelines","text":"This project follows Google's Open Source Community Guidelines .","title":"Community Guidelines"},{"location":"ambianic-python-api/","text":"ambianic Ambianic main service control functions. configure configure(env_work_dir) Load configuration settings. :returns config dict if configuration was loaded without issues. None or a specific exception otherwise. start start(env_work_dir=None) Programmatic start of the main service. stop stop() Programmatic stop of the main service. ambianic.pipeline PipeElement PipeElement(self) The basic building block of an Ambianic pipeline connect_to_next_element PipeElement.connect_to_next_element(self, next_element=None) Connect this element to the next element in the pipe receive_next_sample PipeElement.receive_next_sample(self, **sample) Receive next sample from a connected previous element :argument **kwargs a variable list of (key, value) pairs that represent the sample HealthChecker HealthChecker(self, health_status_callback=None) Attaches at the end of a pipe to monitor its health status based on received output samples and their frequency. receive_next_sample HealthChecker.receive_next_sample(self, **sample) update pipeline heartbeat status ambianic.webapp","title":"Python API"},{"location":"ambianic-python-api/#ambianic","text":"Ambianic main service control functions.","title":"ambianic"},{"location":"ambianic-python-api/#configure","text":"configure(env_work_dir) Load configuration settings. :returns config dict if configuration was loaded without issues. None or a specific exception otherwise.","title":"configure"},{"location":"ambianic-python-api/#start","text":"start(env_work_dir=None) Programmatic start of the main service.","title":"start"},{"location":"ambianic-python-api/#stop","text":"stop() Programmatic stop of the main service.","title":"stop"},{"location":"ambianic-python-api/#ambianicpipeline","text":"","title":"ambianic.pipeline"},{"location":"ambianic-python-api/#pipeelement","text":"PipeElement(self) The basic building block of an Ambianic pipeline","title":"PipeElement"},{"location":"ambianic-python-api/#connect_to_next_element","text":"PipeElement.connect_to_next_element(self, next_element=None) Connect this element to the next element in the pipe","title":"connect_to_next_element"},{"location":"ambianic-python-api/#receive_next_sample","text":"PipeElement.receive_next_sample(self, **sample) Receive next sample from a connected previous element :argument **kwargs a variable list of (key, value) pairs that represent the sample","title":"receive_next_sample"},{"location":"ambianic-python-api/#healthchecker","text":"HealthChecker(self, health_status_callback=None) Attaches at the end of a pipe to monitor its health status based on received output samples and their frequency.","title":"HealthChecker"},{"location":"ambianic-python-api/#receive_next_sample_1","text":"HealthChecker.receive_next_sample(self, **sample) update pipeline heartbeat status","title":"receive_next_sample"},{"location":"ambianic-python-api/#ambianicwebapp","text":"","title":"ambianic.webapp"}]}
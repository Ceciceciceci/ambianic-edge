{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project mission Helpful AI for Home and Business Automation Local data, custom AI models, federated learning Project Status At this time, Ambianic is in active early formation stages. Lots of design and implementation decisions are made daily with focus on advancing the project to an initial stable version as soon as possible. If you are willing to take the risk that comes with early stage code and are able to dive deep into Python, Javascript, Gstreamer, and Tensorflow code, then please keep reading. Otherwise click on the Watch button above (Releases Only option) to be notified when we release a stable end user version. How to run in development mode If you are interested to try the development version, follow these steps: 1. Clone this git repository. 2. ./ambianic-start.sh 3. Study config.yaml and go from there. Contributors If you are interested in becoming a contributor to the project, please read the Contributing page and follow the steps. Looking forward to hearing from you!","title":"Home"},{"location":"#project-mission","text":"Helpful AI for Home and Business Automation Local data, custom AI models, federated learning","title":"Project mission"},{"location":"#project-status","text":"At this time, Ambianic is in active early formation stages. Lots of design and implementation decisions are made daily with focus on advancing the project to an initial stable version as soon as possible. If you are willing to take the risk that comes with early stage code and are able to dive deep into Python, Javascript, Gstreamer, and Tensorflow code, then please keep reading. Otherwise click on the Watch button above (Releases Only option) to be notified when we release a stable end user version.","title":"Project Status"},{"location":"#how-to-run-in-development-mode","text":"If you are interested to try the development version, follow these steps: 1. Clone this git repository. 2. ./ambianic-start.sh 3. Study config.yaml and go from there.","title":"How to run in development mode"},{"location":"#contributors","text":"If you are interested in becoming a contributor to the project, please read the Contributing page and follow the steps. Looking forward to hearing from you!","title":"Contributors"},{"location":"CONTRIBUTING/","text":"How to Contribute We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. Contributor License Agreement Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://ambianic.ai/cla to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again. Code reviews All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests. Community Guidelines This project follows Google's Open Source Community Guidelines .","title":"Contributing"},{"location":"CONTRIBUTING/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.","title":"How to Contribute"},{"location":"CONTRIBUTING/#contributor-license-agreement","text":"Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://ambianic.ai/cla to see your current agreements on file or to sign a new one. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.","title":"Contributor License Agreement"},{"location":"CONTRIBUTING/#code-reviews","text":"All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Code reviews"},{"location":"CONTRIBUTING/#community-guidelines","text":"This project follows Google's Open Source Community Guidelines .","title":"Community Guidelines"},{"location":"ai-apps-bazaar/","text":"About the AI Apps Bazaar Github Repo URL Docker hub URL?","title":"Apps Bazaar"},{"location":"ai-apps-bazaar/#about-the-ai-apps-bazaar","text":"Github Repo URL Docker hub URL?","title":"About the AI Apps Bazaar"},{"location":"ambianic-python-api/","text":"ambianic ambianic.pipeline Main module for Ambianic AI pipelines. PipeElement PipeElement(self) The basic building block of an Ambianic pipeline. healthcheck PipeElement.healthcheck(self) Check the health of this element. :returns: (timestamp, status) tuple with most recent heartbeat timestamp and health status code ('OK' normally). heartbeat PipeElement.heartbeat(self) Set the heartbeat timestamp to time.monotonic(). stop PipeElement.stop(self) Receive stop signal and act accordingly. Subclasses should override this method by first invoking their super class implementation and then running through steps specific to stopping their ongoing sample processing. connect_to_next_element PipeElement.connect_to_next_element(self, next_element=None) Connect this element to the next element in the pipe. Subclasses should not have to override this method. receive_next_sample PipeElement.receive_next_sample(self, **sample) Receive next sample from a connected previous element. Subclasses should not have to override this method. :Parameters: **sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. process_sample PipeElement.process_sample(self, **sample) Implement processing in subclass as a generator function. Invoked by receive_next_sample() when the previous element (or pipeline source) feeds another data input sample. Implementing subclasses should process input samples and yield output samples for the next element in the pipeline. :Parameters: **sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. :Returns: processed_sample: dict Processed sample that will be passed to the next pipeline element. HealthChecker HealthChecker(self, health_status_callback=None) Monitor overall pipeline throughput health. Attaches at the end of a pipeline to monitor its health status based on received output samples and their frequency. process_sample HealthChecker.process_sample(self, **sample) Call health callback and pass on sample as is. ambianic.pipeline.ai ambianic.pipeline.avsource ambianic.webapp","title":"ambianic"},{"location":"ambianic-python-api/#ambianic","text":"","title":"ambianic"},{"location":"ambianic-python-api/#ambianicpipeline","text":"Main module for Ambianic AI pipelines.","title":"ambianic.pipeline"},{"location":"ambianic-python-api/#pipeelement","text":"PipeElement(self) The basic building block of an Ambianic pipeline.","title":"PipeElement"},{"location":"ambianic-python-api/#healthcheck","text":"PipeElement.healthcheck(self) Check the health of this element. :returns: (timestamp, status) tuple with most recent heartbeat timestamp and health status code ('OK' normally).","title":"healthcheck"},{"location":"ambianic-python-api/#heartbeat","text":"PipeElement.heartbeat(self) Set the heartbeat timestamp to time.monotonic().","title":"heartbeat"},{"location":"ambianic-python-api/#stop","text":"PipeElement.stop(self) Receive stop signal and act accordingly. Subclasses should override this method by first invoking their super class implementation and then running through steps specific to stopping their ongoing sample processing.","title":"stop"},{"location":"ambianic-python-api/#connect_to_next_element","text":"PipeElement.connect_to_next_element(self, next_element=None) Connect this element to the next element in the pipe. Subclasses should not have to override this method.","title":"connect_to_next_element"},{"location":"ambianic-python-api/#receive_next_sample","text":"PipeElement.receive_next_sample(self, **sample) Receive next sample from a connected previous element. Subclasses should not have to override this method.","title":"receive_next_sample"},{"location":"ambianic-python-api/#parameters","text":"**sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements.","title":":Parameters:"},{"location":"ambianic-python-api/#process_sample","text":"PipeElement.process_sample(self, **sample) Implement processing in subclass as a generator function. Invoked by receive_next_sample() when the previous element (or pipeline source) feeds another data input sample. Implementing subclasses should process input samples and yield output samples for the next element in the pipeline.","title":"process_sample"},{"location":"ambianic-python-api/#parameters_1","text":"**sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. :Returns: processed_sample: dict Processed sample that will be passed to the next pipeline element.","title":":Parameters:"},{"location":"ambianic-python-api/#healthchecker","text":"HealthChecker(self, health_status_callback=None) Monitor overall pipeline throughput health. Attaches at the end of a pipeline to monitor its health status based on received output samples and their frequency.","title":"HealthChecker"},{"location":"ambianic-python-api/#process_sample_1","text":"HealthChecker.process_sample(self, **sample) Call health callback and pass on sample as is.","title":"process_sample"},{"location":"ambianic-python-api/#ambianicpipelineai","text":"","title":"ambianic.pipeline.ai"},{"location":"ambianic-python-api/#ambianicpipelineavsource","text":"","title":"ambianic.pipeline.avsource"},{"location":"ambianic-python-api/#ambianicwebapp","text":"","title":"ambianic.webapp"},{"location":"api-overview/","text":"API Overview REST Backend Python Frontend JS Other","title":"API Overview"},{"location":"api-overview/#api-overview","text":"REST Backend Python Frontend JS Other","title":"API Overview"},{"location":"architecture/","text":"Ambianic High Level Architecture Pipelines Pipe Elements Sources Outputs Connecting Pipelines Integrations","title":"Architecture"},{"location":"architecture/#ambianic-high-level-architecture","text":"Pipelines Pipe Elements Sources Outputs Connecting Pipelines Integrations","title":"Ambianic High Level Architecture"},{"location":"cloud-deployment/","text":"Cloud Deployment Scenarios Private Cloud Public Cloud","title":"Private cloud deploymeny"},{"location":"cloud-deployment/#cloud-deployment-scenarios","text":"Private Cloud Public Cloud","title":"Cloud Deployment Scenarios"},{"location":"configure/","text":"Configuring Ambianic Quickstart reference Most common configuration settings Advanced configuration Configuration changes: runtime safe and restart changes","title":"Configuring"},{"location":"configure/#configuring-ambianic","text":"Quickstart reference Most common configuration settings Advanced configuration Configuration changes: runtime safe and restart changes","title":"Configuring Ambianic"},{"location":"custom-ai-apps/","text":"Installing and Running Custom AI Apps Examples of custom apps Where to get custom apps How to install and run","title":"Custom apps"},{"location":"custom-ai-apps/#installing-and-running-custom-ai-apps","text":"Examples of custom apps Where to get custom apps How to install and run","title":"Installing and Running Custom AI Apps"},{"location":"edge-deployment/","text":"Edge IoT Deployment Scenarios Raspberry Pi Minimal install, capacity planning, scaling, monitoring.","title":"Edge deployment"},{"location":"edge-deployment/#edge-iot-deployment-scenarios","text":"Raspberry Pi Minimal install, capacity planning, scaling, monitoring.","title":"Edge IoT Deployment Scenarios"},{"location":"faq/","text":"Frequently Asked Questions TBD","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"TBD","title":"Frequently Asked Questions"},{"location":"hass-integration/","text":"Home Assistant Integration TBD","title":"Home Assistant"},{"location":"hass-integration/#home-assistant-integration","text":"TBD","title":"Home Assistant Integration"},{"location":"home-bridge-integration/","text":"Home Bridge Integration TBD","title":"Home Bridge"},{"location":"home-bridge-integration/#home-bridge-integration","text":"TBD","title":"Home Bridge Integration"},{"location":"howto/","text":"How To TBD","title":"How To"},{"location":"howto/#how-to","text":"TBD","title":"How To"},{"location":"install/","text":"Installing and Running Ambianic Quickstart reference Various install scenarios: CPU, OS matrix","title":"Installing"},{"location":"install/#installing-and-running-ambianic","text":"Quickstart reference Various install scenarios: CPU, OS matrix","title":"Installing and Running Ambianic"},{"location":"js-api/","text":"Frontend JavaScript API TBD","title":"Frontend JavaScript API"},{"location":"js-api/#frontend-javascript-api","text":"TBD","title":"Frontend JavaScript API"},{"location":"mobileui/","text":"Amianic Mobile UI Registration and login Your Inference Timeline Alerts and Notifications","title":"Mobile UI"},{"location":"mobileui/#amianic-mobile-ui","text":"Registration and login Your Inference Timeline Alerts and Notifications","title":"Amianic Mobile UI"},{"location":"mqtt-api/","text":"MQTT API TBD","title":"MQTT API"},{"location":"mqtt-api/#mqtt-api","text":"TBD","title":"MQTT API"},{"location":"publish-bazaar/","text":"Publishing to AI Apps Bazaar TBD","title":"Publishing to App Bazaar"},{"location":"publish-bazaar/#publishing-to-ai-apps-bazaar","text":"TBD","title":"Publishing to AI Apps Bazaar"},{"location":"python-api/","text":"Backend Python API TBD High level description [link to raw API][raw-python-api.md]","title":"Backend Python API"},{"location":"python-api/#backend-python-api","text":"TBD High level description [link to raw API][raw-python-api.md]","title":"Backend Python API"},{"location":"quickstart/","text":"Quick Start TBD","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"TBD","title":"Quick Start"},{"location":"raw-python-api/","text":"ambianic ambianic.pipeline Main module for Ambianic AI pipelines. PipeElement PipeElement(self) The basic building block of an Ambianic pipeline. healthcheck PipeElement.healthcheck(self) Check the health of this element. :returns: (timestamp, status) tuple with most recent heartbeat timestamp and health status code ('OK' normally). heartbeat PipeElement.heartbeat(self) Set the heartbeat timestamp to time.monotonic(). stop PipeElement.stop(self) Receive stop signal and act accordingly. Subclasses should override this method by first invoking their super class implementation and then running through steps specific to stopping their ongoing sample processing. connect_to_next_element PipeElement.connect_to_next_element(self, next_element=None) Connect this element to the next element in the pipe. Subclasses should not have to override this method. receive_next_sample PipeElement.receive_next_sample(self, **sample) Receive next sample from a connected previous element. Subclasses should not have to override this method. :Parameters: **sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. process_sample PipeElement.process_sample(self, **sample) Implement processing in subclass as a generator function. Invoked by receive_next_sample() when the previous element (or pipeline source) feeds another data input sample. Implementing subclasses should process input samples and yield output samples for the next element in the pipeline. :Parameters: **sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. :Returns: processed_sample: dict Processed sample that will be passed to the next pipeline element. HealthChecker HealthChecker(self, health_status_callback=None) Monitor overall pipeline throughput health. Attaches at the end of a pipeline to monitor its health status based on received output samples and their frequency. process_sample HealthChecker.process_sample(self, **sample) Call health callback and pass on sample as is. ambianic.pipeline.ai ambianic.pipeline.avsource ambianic.webapp","title":"ambianic"},{"location":"raw-python-api/#ambianic","text":"","title":"ambianic"},{"location":"raw-python-api/#ambianicpipeline","text":"Main module for Ambianic AI pipelines.","title":"ambianic.pipeline"},{"location":"raw-python-api/#pipeelement","text":"PipeElement(self) The basic building block of an Ambianic pipeline.","title":"PipeElement"},{"location":"raw-python-api/#healthcheck","text":"PipeElement.healthcheck(self) Check the health of this element. :returns: (timestamp, status) tuple with most recent heartbeat timestamp and health status code ('OK' normally).","title":"healthcheck"},{"location":"raw-python-api/#heartbeat","text":"PipeElement.heartbeat(self) Set the heartbeat timestamp to time.monotonic().","title":"heartbeat"},{"location":"raw-python-api/#stop","text":"PipeElement.stop(self) Receive stop signal and act accordingly. Subclasses should override this method by first invoking their super class implementation and then running through steps specific to stopping their ongoing sample processing.","title":"stop"},{"location":"raw-python-api/#connect_to_next_element","text":"PipeElement.connect_to_next_element(self, next_element=None) Connect this element to the next element in the pipe. Subclasses should not have to override this method.","title":"connect_to_next_element"},{"location":"raw-python-api/#receive_next_sample","text":"PipeElement.receive_next_sample(self, **sample) Receive next sample from a connected previous element. Subclasses should not have to override this method.","title":"receive_next_sample"},{"location":"raw-python-api/#parameters","text":"**sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements.","title":":Parameters:"},{"location":"raw-python-api/#process_sample","text":"PipeElement.process_sample(self, **sample) Implement processing in subclass as a generator function. Invoked by receive_next_sample() when the previous element (or pipeline source) feeds another data input sample. Implementing subclasses should process input samples and yield output samples for the next element in the pipeline.","title":"process_sample"},{"location":"raw-python-api/#parameters_1","text":"**sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. :Returns: processed_sample: dict Processed sample that will be passed to the next pipeline element.","title":":Parameters:"},{"location":"raw-python-api/#healthchecker","text":"HealthChecker(self, health_status_callback=None) Monitor overall pipeline throughput health. Attaches at the end of a pipeline to monitor its health status based on received output samples and their frequency.","title":"HealthChecker"},{"location":"raw-python-api/#process_sample_1","text":"HealthChecker.process_sample(self, **sample) Call health callback and pass on sample as is.","title":"process_sample"},{"location":"raw-python-api/#ambianicpipelineai","text":"","title":"ambianic.pipeline.ai"},{"location":"raw-python-api/#ambianicpipelineavsource","text":"","title":"ambianic.pipeline.avsource"},{"location":"raw-python-api/#ambianicwebapp","text":"","title":"ambianic.webapp"},{"location":"rest-api/","text":"REST API TBD","title":"REST API"},{"location":"rest-api/#rest-api","text":"TBD","title":"REST API"},{"location":"standard-ai-apps/","text":"Standard AI Apps Included with the base Ambianic distribution Object Detection Face Detection Face Recognition Etc.","title":"Standard apps"},{"location":"standard-ai-apps/#standard-ai-apps-included-with-the-base-ambianic-distribution","text":"Object Detection Face Detection Face Recognition Etc.","title":"Standard AI Apps Included with the base Ambianic distribution"},{"location":"support/","text":"Support TBD","title":"Support"},{"location":"support/#support","text":"TBD","title":"Support"},{"location":"testing-ai-apps/","text":"Testing AI Apps TBD","title":"Testing Custom AI apps"},{"location":"testing-ai-apps/#testing-ai-apps","text":"TBD","title":"Testing AI Apps"},{"location":"websockets-api/","text":"WebSockets API TBD","title":"WebSockets API"},{"location":"websockets-api/#websockets-api","text":"TBD","title":"WebSockets API"},{"location":"webui/","text":"Amianic Web UI Registration and login Securing access AI Apps Overview Pipelines Overview Advanced Pipeline Composition","title":"Web UI"},{"location":"webui/#amianic-web-ui","text":"Registration and login Securing access AI Apps Overview Pipelines Overview Advanced Pipeline Composition","title":"Amianic Web UI"},{"location":"writing-ai-apps/","text":"Writing AI Apps TBD","title":"Writing Custom AI apps"},{"location":"writing-ai-apps/#writing-ai-apps","text":"TBD","title":"Writing AI Apps"}]}